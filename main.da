# import driver
# from nacl.signing import SigningKey
# from configs import configs


# class RunDriver(process):
#     def setup(config, test_case_id):
#         self.nvalidators = config['nvalidators']
#         self.nclients = config['nclients']
#         self.nfaultyvalidators = config['nfaultyvalidators']
#         self.maxtimeout = config['maxtimeout']
#         self.clienttimeout = config['clienttimeout']
#         self.test_case_id = test_case_id
#         self.failure_config = config['failures']
#         self.nclientops = config['nclientops']

    
#     def run():
#         nvalidators = self.nvalidators
#         nclients = self.nclients
#         maxtimeout = self.maxtimeout

#         clients = new(driver.Client, num=nclients)
#         validators = new(driver.ValidatorFI, num=nvalidators)
#         public_keys_validators=[]
#         private_keys_validators=[]
#         for _ in range(nvalidators):
#             sk = SigningKey.generate()
#             pk = sk.verify_key
#             public_keys_validators.append(pk)
#             private_keys_validators.append(sk)
#         #print(public_keys_validators)
#         #print(private_keys_validators)
#         public_keys_clients=[]
#         private_keys_clients=[]
#         for _ in range(nclients):
#             sk = SigningKey.generate()
#             pk = sk.verify_key
#             public_keys_clients.append(pk)
#             private_keys_clients.append(sk)
#         #output(validators)
#         for i, v in enumerate(validators):
#             setup({v}, (i, private_keys_validators[i], public_keys_validators, public_keys_clients, validators, clients, test_case_id, failure_config))
#         for i, c in enumerate(clients):
#             setup({c}, (i, private_keys_clients[i], public_keys_validators, validators, nclientops, nfaultyvalidators))
#         start(clients)
#         start(validators)

# def main():
#     test_case = 1
#     for config in configs:
#         p = new(RunDriver)
#         setup(p,(config,test_case))
#         start(p)
#         test_case+=1

import json
import time

from generator import scenario_generator
from executor import TestExecutor
def main():
    with open("pseudocode/generator_config.json", "r") as read_file:
        data = json.load(read_file)

    generator = scenario_generator(fileName="data_testcase_5.json")
    # generator = scenario_generator(config=data)
    scenario = generator.generate_scenario()

    i = 0
    while scenario:
        output('**********************************************************')
        output("new scenario started")
        output('**********************************************************')
        executor = new(TestExecutor)
        setup(executor, (scenario,i))
        start(executor)
        await(received('done', from_=executor))
        end(executor)
        output('received done from executor')
        time.sleep(2)

        scenario = None
        # scenario = generator.generate_scenario()
        i+=1
        