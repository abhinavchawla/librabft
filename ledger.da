import pickle
class Ledger_State():
    def __init__(self, prev_state_id, txns, state_id) :
        self.prev_state_id = prev_state_id
        self.txns = txns
        self.state_id = state_id
        self.is_committed = False

class Ledger():
    def __init__(self, file_name) :
        self.block_id_to_ledger_state_map = {}
        self.ledger_id_to_ledger_state_map = {}
        self.block_id_to_block_map = {}
        self.file_name = file_name
        open(file_name, 'w').close()


    def speculate(self, prev_block_id, block_id, txns, block): #// apply txns speculatively
        prev_state, prev_state_id = None, None
        if prev_block_id:
            prev_state = self.block_id_to_ledger_state_map[prev_block_id]
            prev_state_id = prev_state.state_id
        state_id = hash(pickle.dumps((prev_state,txns)))
        state = Ledger_State(prev_state_id, txns, state_id)
        self.block_id_to_ledger_state_map[block_id] = state
        self.ledger_id_to_ledger_state_map[state_id] = state
        self.block_id_to_block_map[block_id] = block
        return self.block_id_to_ledger_state_map[block_id]
    
    def pending_state(self, block_id):                  #// find the pending state for the given block id or âŠ¥ if not present
        return self.block_id_to_ledger_state_map[block_id].state_id

    def commit(self,block_id):                               #// commit the pending prefix of the given block id and prune other branches
        f = open(self.file_name, "a")
        state_id = self.block_id_to_ledger_state_map[block_id].state_id
        state = self.ledger_id_to_ledger_state_map[state_id]
        while state.is_committed == False:
            f.write(state.txns)
            f.write("\n")
            state.is_committed = True
            state_id = state.prev_state_id
            if not state_id:
                break 
            state = self.ledger_id_to_ledger_state_map[state_id]
        f.close()

    def committed_block(self, block_id):                      #// returns a committed block given its id
        # TODO: Fix this, send a block instead
        if block_id:
            return self.block_id_to_block_map[block_id]
        else:
            return None